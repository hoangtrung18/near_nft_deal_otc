{"version":3,"file":"nft.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/metadata.ts","../src/internal.ts","../src/mint.ts","../src/nft_core.ts","../src/enumeration.ts","../src/approval.ts","../src/royalty.ts","../src/index.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \".\";\n\n//defines the payout type we'll be returning as a part of the royalty standards.\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n    \n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec  // required, essentially a version like \"nft-1.0.0\"\n        this.name = name  // required, ex. \"Mosaics\"\n        this.symbol = symbol // required, ex. \"MOSAIC\"\n        this.icon = icon // Data URL\n        this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n        this.reference = reference // URL to a JSON file with more info\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n        this.description = description // free-form description\n        this.media = media // URL to associated media, preferably to decentralized, content-addressed storage\n        this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n        this.copies = copies // number of copies of this set of metadata in existence when token was minted.\n        this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted\n        this.expires_at = expiresAt // ISO 8601 datetime when token expires\n        this.starts_at = startsAt // ISO 8601 datetime when token starts being valid\n        this.updated_at = updatedAt // ISO 8601 datetime when token was last updated\n        this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n        this.reference = reference // URL to an off-chain JSON file with more info.\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class Token {\n    owner_id: string;\n    approved_account_ids: { [accountId: string]: number };\n    next_approval_id: number;\n    royalty: { [accountId: string]: number };\n\n    constructor({ \n        ownerId, \n        approvedAccountIds, \n        nextApprovalId, \n        royalty \n    }:{ \n        ownerId: string, \n        approvedAccountIds: { [accountId: string]: number }, \n        nextApprovalId: number, \n        royalty: { [accountId: string]: number } \n    }) {\n        //owner of the token\n        this.owner_id = ownerId,\n        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n        this.approved_account_ids = approvedAccountIds,\n        //the next approval ID to give out. \n        this.next_approval_id = nextApprovalId,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n    approved_account_ids: { [accountId: string]: number };\n    royalty: { [accountId: string]: number };\n\n    constructor({ \n        tokenId, \n        ownerId, \n        metadata, \n        approvedAccountIds, \n        royalty \n    }:{\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n        approvedAccountIds: { [accountId: string]: number },\n        royalty: { [accountId: string]: number }\n    }) {\n        //token ID\n        this.token_id = tokenId,\n        //owner of the token\n        this.owner_id = ownerId,\n        //token metadata\n        this.metadata = metadata,\n        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n        this.approved_account_ids = approvedAccountIds,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { Token } from \"./metadata\";\n\n// Gets a collection and deserializes it into a set that can be used.\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\n//convert the royalty percentage and amount to pay into a payout (U128)\nexport function royaltyToPayout(royaltyPercentage: number, amountToPay: bigint): string {\n    return (BigInt(royaltyPercentage) * BigInt(amountToPay) / BigInt(10000)).toString();\n}\n\n//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. \nexport function refundApprovedAccountIdsIter(accountId: string, approvedAccountIds: string[]) {\n    //get the storage total by going through and summing all the bytes for each approved account IDs\n    let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);\n    let amountToTransfer = BigInt(storageReleased) * near.storageByteCost().valueOf();\n    \n    // Send the money to the beneficiary (TODO: don't use batch actions)\n    const promise = near.promiseBatchCreate(accountId);\n    near.promiseBatchActionTransfer(promise, amountToTransfer)\n}\n\n//refund a map of approved account IDs and send the funds to the passed in account ID\nexport function refundApprovedAccountIds(accountId: string, approvedAccountIds: { [key: string]: number }) {\n    //call the refundApprovedAccountIdsIter with the approved account IDs as keys\n    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\n//refund the initial deposit based on the amount of storage that was used up\nexport function refundDeposit(storageUsed: bigint) {\n    //get how much it would cost to store the information\n    let requiredCost = storageUsed * near.storageByteCost().valueOf()\n    //get the attached deposit\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    //make sure that the attached deposit is greater than or equal to the required cost\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    )\n\n    //get the refund amount from the attached deposit - required cost\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount\n    if (refund > 1) {\n        // Send the money to the beneficiary (TODO: don't use batch actions)\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund)\n    }\n}\n\n//calculate how many bytes the account ID is taking up\nexport function bytesForApprovedAccountId(accountId: string): number {\n    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.\n    return accountId.length + 4 + 8;\n}\n\n//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)\nexport function assertAtLeastOneYocto() {\n    assert(near.attachedDeposit().valueOf() >= BigInt(1), \"Requires attached deposit of at least 1 yoctoNEAR\");\n}\n\n//used to make sure the user attached exactly 1 yoctoNEAR\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\n//add a token to the set of tokens an owner has\nexport function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {\n    //get the set of tokens for the given account\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if(tokenSet == null) {\n        //if the account doesn't have any tokens, we create a new unordered set\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    //we insert the token ID into the set\n    tokenSet.set(tokenId);\n\n    //we insert that set for the given account ID. \n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n//remove a token from an owner (internal method and can't be called directly via CLI).\nexport function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {\n    //we get the set of tokens that the owner has\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there is no set of tokens for the owner, we panic with the following message:\n    if (tokenSet == null) {\n        near.panic(\"Token should be owned by the sender\");\n    }\n\n    //we remove the the token_id from the set of tokens\n    tokenSet.remove(tokenId)\n\n    //if the token set is now empty, we remove the owner from the tokens_per_owner collection\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n    } else { //if the token set is not empty, we simply insert it back for the account ID. \n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}\n\n//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).\nexport function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, approvalId: number, memo: string): Token {\n    //get the token object by passing in the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token found\");\n    }\n\n    //if the sender doesn't equal the owner, we check if the sender is in the approval list\n    if (senderId != token.owner_id) {\n        //if the token's approved account IDs doesn't contain the sender, we panic\n        if (!token.approved_account_ids.hasOwnProperty(senderId)) {\n            near.panic(\"Unauthorized\");\n        }\n\n        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included\n        if (approvalId != null) {\n            //get the actual approval ID\n            let actualApprovalId = token.approved_account_ids[senderId];\n            //if the sender isn't in the map, we panic\n            if (actualApprovalId == null) {\n                near.panic(\"Sender is not approved account\");\n            }\n\n            //make sure that the actual approval ID is the same as the one provided\n            assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);\n        }\n    }\n\n    //we make sure that the sender isn't sending the token to themselves\n    assert(token.owner_id != receiverId, \"The token owner and the receiver should be different\")\n\n    //we remove the token from it's current owner's set\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    //we then add the token to the receiver_id's set\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    //we create a new token struct \n    let newToken = new Token ({\n        ownerId: receiverId,\n        //reset the approval account IDs\n        approvedAccountIds: {},\n        nextApprovalId: token.next_approval_id,\n        //we copy over the royalties from the previous token\n        royalty: token.royalty,\n    });\n\n    //insert that new token into the tokens_by_id, replacing the old entry \n    contract.tokensById.set(tokenId, newToken);\n\n    //if there was some memo attached, we log it. \n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    // Default the authorized ID to be None for the logs.\n    let authorizedId;\n\n    //if the approval ID was provided, set the authorized ID equal to the sender\n    if (approvalId != null) {\n        authorizedId = senderId\n    }\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: token.owner_id,\n                // The account ID of the new owner of the token.\n                new_owner_id: receiverId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return the previous token object that was transferred.\n    return token\n}","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiverId,\n    perpetualRoyalties\n}:{ \n    contract: Contract, \n    tokenId: string, \n    metadata: TokenMetadata, \n    receiverId: string \n    perpetualRoyalties: {[key: string]: number}\n}): void {\n    //measure the initial storage being used on the contract TODO\n    let initialStorageUsage = near.storageUsage();\n\n    // create a royalty map to store in the token\n    let royalty: { [accountId: string]: number } = {}\n\n    // if perpetual royalties were passed into the function: TODO: add isUndefined fn\n    if (perpetualRoyalties != null) {\n        //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people\n        assert(Object.keys(perpetualRoyalties).length < 7, \"Cannot add more than 6 perpetual royalty amounts\");\n        \n        //iterate through the perpetual royalties and insert the account and amount in the royalty map\n        Object.entries(perpetualRoyalties).forEach(([account, amount], index) => {\n            royalty[account] = amount;\n        });\n    }\n\n    //specify the token struct that contains the owner ID \n    let token = new Token ({\n        //set the owner ID equal to the receiver ID passed into the function\n        ownerId: receiverId,\n        //we set the approved account IDs to the default value (an empty map)\n        approvedAccountIds: {},\n        //the next approval ID is set to 0\n        nextApprovalId: 0,\n        //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)\n        royalty,\n    });\n\n    //insert the token ID and token struct and make sure that the token doesn't exist\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists\");\n    contract.tokensById.set(tokenId, token)\n\n    //insert the token ID and metadata\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    //call the internal method for adding the token to the owner\n    internalAddTokenToOwner(contract, token.owner_id, tokenId)\n\n    // Construct the mint log as per the events standard.\n    let nftMintLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_mint\",\n        data: [\n            {\n                // Owner of the token.\n                owner_id: token.owner_id,\n                // Vector of token IDs that were minted.\n                token_ids: [tokenId],\n            }\n        ]\n    }\n    \n    // Log the json.\n    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n\n    //calculate the required storage which was the used - initial TODO\n    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n    refundDeposit(requiredStorageInBytes);\n}","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\n//get the information for a specific token ID\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    //if there wasn't a token ID in the tokens_by_id collection, we return None\n    if (token == null) {\n        return null;\n    }\n\n    //if there is some token ID in the tokens_by_id collection\n    //we'll get the metadata for that token\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n    \n    //we return the JsonToken\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n        approvedAccountIds: token.approved_account_ids,\n        royalty: token.royalty\n    });\n    return jsonToken;\n}\n\n//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string, \n    approvalId: number\n    memo: string\n}) {\n    //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //we refund the owner for releasing the storage used up by the approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids\n    );\n}\n\n//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}:{\n    contract: Contract,\n    receiverId: string, \n    tokenId: string, \n    approvalId: number,\n    memo: string,\n    msg: string  \n}) {\n    //assert that the user attached exactly 1 yocto for security reasons. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    // Initiating receiver's call and the callback\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise, \n        \"nft_on_transfer\", \n        bytes(JSON.stringify({ \n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })), \n        0, // no deposit \n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    // We then resolve the promise and call nft_resolve_transfer on our own contract\n    near.promiseThen(\n        promise, \n        near.currentAccountId(), \n        \"nft_resolve_transfer\", \n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId,\n            approved_account_ids: previousToken.approved_account_ids\n        })), \n        0, // no deposit \n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\n//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n//returns true if the token was successfully transferred to the receiver_id\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}:{\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string    \n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`\n    // call result.\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not\n        //if we need don't need to return the token, we simply return true meaning everything went fine\n        if (result === 'false') {\n            /* \n                since we've already transferred the token and nft_on_transfer returned false, we don't have to \n                revert the original transfer and thus we can just return true since nothing went wrong.\n            */\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    }\n\n    //get the token object if there is some token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            // The token is not owner by the receiver anymore. Can't return it.\n            return true;\n        }\n    //if there isn't a token object, it was burned and so we return true\n    } else {\n        //we refund the owner for releasing the storage used up by the approved account IDs\n        refundApprovedAccountIds(ownerId, approvedAccountIds);\n        return true;\n    }\n\n    //we remove the token from the receiver\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    //we add the token to the original owner\n    internalAddTokenToOwner(contract, ownerId, tokenId);\n\n    //we change the token struct's owner to be the original owner \n    token.owner_id = ownerId\n\n    //we refund the receiver any approved account IDs that they may have set on the token\n    refundApprovedAccountIds(receiverId, token.approved_account_ids);\n    //reset the approved account IDs to what they were before the transfer\n    token.approved_account_ids = approvedAccountIds;\n\n    //we inset the token b  ack into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    /*\n        We need to log that the NFT was reverted back to the original owner.\n        The old_owner_id will be the receiver and the new_owner_id will be the\n        original owner of the token since we're reverting the transfer.\n    */\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: receiverId,\n                // The account ID of the new owner of the token.\n                new_owner_id: ownerId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return false\n    return false\n}","// @ts-nocheck\nimport { near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\n//Query for the total supply of NFTs on the contract\nexport function internalTotalSupply({\n    contract\n}:{\n    contract: Contract\n}): number {\n    //return the length of the token metadata by ID\n    return contract.tokenMetadataById.len();\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        let jsonToken = internalNftToken({contract, tokenId: keys[i][0]});\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}:{\n    contract: Contract, \n    accountId: string\n}): number {\n    //get the set of tokens for the passed in owner\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokens == null) {\n        return 0\n    }\n\n    //if there is some set of tokens, we'll return the length \n    return tokens.len();\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{\n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    //get the set of tokens for the passed in owner\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({contract, tokenId: keys[i]});\n        tokens.push(token);\n    }\n    return tokens;\n}","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from \"./internal\";\nimport { Token } from \"./metadata\";\n\nconst GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;\n\n//approve an account ID to transfer a token on your behalf\nexport function internalNftApprove({\n    contract,\n    tokenId,\n    accountId,\n    msg\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string, \n    msg: string \n}) {\n    /*\n        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.\n        The user needs to attach enough to pay for storage on the contract\n    */\n    assertAtLeastOneYocto();\n\n    //get the token object from the token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n    //make sure that the person calling the function is the owner of the token\n    assert(near.predecessorAccountId() === token.owner_id, \"Predecessor must be the token owner\");\n\n    //get the next approval ID if we need a new approval\n    let approvalId = token.next_approval_id;\n\n    //check if the account has been approved already for this token\n    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);\n    token.approved_account_ids[accountId] = approvalId;\n\n    //if it was a new approval, we need to calculate how much storage is being used to add the account.\n    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;\n\n    //increment the token's next approval ID by 1\n    token.next_approval_id += 1;\n    //insert the token back into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    //refund any excess storage attached by the user. If the user didn't attach enough, panic. \n    refundDeposit(BigInt(storageUsed));\n    \n    //if some message was passed into the function, we initiate a cross contract call on the\n    //account we're giving access to. \n    if (msg != null) {\n        // Initiating receiver's call and the callback\n        const promise = near.promiseBatchCreate(accountId);\n        near.promiseBatchActionFunctionCall(\n            promise, \n            \"nft_on_approve\", \n            bytes(JSON.stringify({ \n                token_id: tokenId,\n                owner_id: token.owner_id,\n                approval_id: approvalId,\n                msg\n            })), \n            0, // no deposit \n            GAS_FOR_NFT_ON_APPROVE\n        );\n\n        near.promiseReturn(promise);\n    }\n}\n\n//check if the passed in account has access to approve the token ID\nexport function internalNftIsApproved({\n    contract,\n    tokenId,\n    approvedAccountId,\n    approvalId\n}:{ \n    contract: Contract, \n    tokenId: string,\n    approvedAccountId: string, \n    approvalId: number \n}) {\n    //get the token object from the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the approval number for the passed in account ID\n    let approval = token.approved_account_ids[approvedAccountId];\n\n    //if there was no approval ID found for the account ID, we simply return false\n    if (approval == null) {\n        return false\n    }\n\n    //if there was some approval ID found for the account ID\n    //if there was no approval_id passed into the function, we simply return true\n    if (approvalId == null) {\n        return true\n    }\n\n    //if a specific approval_id was passed into the function\n    //return if the approval ID passed in matches the actual approval ID for the account\n    return approvalId == approval;\n}\n\n//revoke a specific account from transferring the token on your behalf\nexport function internalNftRevoke({\n    contract,\n    tokenId,\n    accountId\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string \n}) {\n    //assert that the user attached exactly 1 yoctoNEAR for security reasons\n    assertOneYocto();\n\n    //get the token object using the passed in token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller of the function and assert that they are the owner of the token\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n     \n    //if the account ID was in the token's approval, we remove it\n    if (token.approved_account_ids.hasOwnProperty(accountId)) {\n        delete token.approved_account_ids[accountId];\n        \n        //refund the funds released by removing the approved_account_id to the caller of the function\n        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);\n        \n        //insert the token back into the tokens_by_id collection with the account_id removed from the approval list\n        contract.tokensById.set(tokenId, token);\n    }\n}\n\n//revoke all accounts from transferring the token on your behalf\nexport function internalNftRevokeAll({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    //assert that the caller attached exactly 1 yoctoNEAR for security\n    assertOneYocto();\n\n    //get the token object from the passed in token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller and make sure they are the owner of the tokens\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    //only revoke if the approved account IDs for the token is not empty\n    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {\n        //refund the approved account IDs to the caller of the function\n        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);\n        //clear the approved account IDs\n        token.approved_account_ids = {};\n        //insert the token back into the tokens_by_id collection with the approved account IDs cleared\n        contract.tokensById.set(tokenId, token);\n    }\n}","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, internalTransfer, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter, royaltyToPayout } from \"./internal\";\nimport { Token } from \"./metadata\";\n\n//calculates the payout for a token given the passed in balance. This is a view method\nexport function internalNftPayout({\n    contract,\n    tokenId,\n    balance,\n    maxLenPayout\n}:{\n    contract: Contract, \n    tokenId: string,\n    balance: bigint, \n    maxLenPayout: number,\n}): { payout: {[key: string]: string }} {\n    //get the token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the owner of the token\n    let ownerId = token.owner_id;\n    //keep track of the total perpetual royalties\n    let totalPerpetual = 0;\n    //keep track of the payout object to send back\n    let payoutObj: { [key: string]: string } = {};\n    //get the royalty object from token\n    let royalty = token.royalty;\n\n    //make sure we're not paying out to too many people (GAS limits this)\n    assert(Object.keys(royalty).length <= maxLenPayout, \"Market cannot payout to that many receivers\");\n    \n    //go through each key and value in the royalty object\n    Object.entries(royalty).forEach(([key, value], index) => {\n        //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n        if (key != ownerId) {\n            payoutObj[key] = royaltyToPayout(value, balance);\n            totalPerpetual += value;\n        }\n    });\n\n    // payout to previous owner who gets 100% - total perpetual royalties\n    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n    //return the payout object\n    return {\n        payout: payoutObj\n    }\n}\n\n//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \nexport function internalNftTransferPayout({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    balance,\n    maxLenPayout\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string,\n    approvalId: number,\n    memo: string,\n    balance: bigint,\n    maxLenPayout: number,\n}): { payout: {[key: string]: string }} {\n    //assert that the user attached 1 yocto NEAR for security reasons\n    assertOneYocto();\n    //get the sender ID\n    let senderId = near.predecessorAccountId();\n    //transfer the token to the passed in receiver and get the previous token object back\n    let previousToken: Token = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //refund the previous token owner for the storage used up by the previous approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids,\n    );\n\n    //get the owner of the token\n    let ownerId = previousToken.owner_id;\n    //keep track of the total perpetual royalties\n    let totalPerpetual = 0;\n    //keep track of the payout object to send back\n    let payoutObj: { [key: string]: string } = {};\n    //get the royalty object from token\n    let royalty = previousToken.royalty;\n\n    //make sure we're not paying out to too many people (GAS limits this)\n    assert(Object.keys(royalty).length <= maxLenPayout, \"Market cannot payout to that many receivers\");\n    \n    //go through each key and value in the royalty object\n    Object.entries(royalty).forEach(([key, value], index) => {\n        //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n        if (key != ownerId) {\n            payoutObj[key] = royaltyToPayout(value, balance);\n            totalPerpetual += value;\n        }\n    });\n\n    // payout to previous owner who gets 100% - total perpetual royalties\n    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n    //return the payout object\n    return {\n        payout: payoutObj\n    }\n}","import {\n  NearContract,\n  NearBindgen,\n  call,\n  view,\n  LookupMap,\n  UnorderedMap,\n} from \"near-sdk-js\";\nimport { NFTContractMetadata, internalNftMetadata } from \"./metadata\";\nimport { internalMint } from \"./mint\";\nimport {\n  internalNftTokens,\n  internalSupplyForOwner,\n  internalTokensForOwner,\n  internalTotalSupply,\n} from \"./enumeration\";\nimport {\n  internalNftToken,\n  internalNftTransfer,\n  internalNftTransferCall,\n  internalResolveTransfer,\n} from \"./nft_core\";\nimport {\n  internalNftApprove,\n  internalNftIsApproved,\n  internalNftRevoke,\n  internalNftRevokeAll,\n} from \"./approval\";\nimport { internalNftPayout, internalNftTransferPayout } from \"./royalty\";\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n@NearBindgen\nexport class Contract extends NearContract {\n  owner_id: string;\n  tokensPerOwner: LookupMap;\n  tokensById: LookupMap;\n  tokenMetadataById: UnorderedMap;\n  metadata: NFTContractMetadata;\n\n  /*\n        initialization function (can only be called once).\n        this initializes the contract with metadata that was passed in and\n        the owner_id. \n    */\n  constructor({\n    owner_id,\n    metadata = {\n      spec: \"nft-1.0.0\",\n      name: \"NFT Tutorial Contract\",\n      symbol: \"GOTEAM\",\n    },\n  }) {\n    super();\n    this.owner_id = owner_id;\n    this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n    this.tokensById = new LookupMap(\"tokensById\");\n    this.tokenMetadataById = new UnorderedMap(\"tokenMetadataById\");\n    this.metadata = metadata;\n  }\n\n  default() {\n    return new Contract({ owner_id: \"\" });\n  }\n\n  /*\n        MINT\n    */\n  @call\n  nft_mint({ token_id, metadata, receiver_id, perpetual_royalties }) {\n    return internalMint({\n      contract: this,\n      tokenId: token_id,\n      metadata: metadata,\n      receiverId: receiver_id,\n      perpetualRoyalties: perpetual_royalties,\n    });\n  }\n\n  /*\n        CORE\n    */\n  @view\n  //get the information for a specific token ID\n  nft_token({ token_id }) {\n    return internalNftToken({ contract: this, tokenId: token_id });\n  }\n\n  @call\n  //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver.\n  nft_transfer({ receiver_id, token_id, approval_id, memo }) {\n    return internalNftTransfer({\n      contract: this,\n      receiverId: receiver_id,\n      tokenId: token_id,\n      approvalId: approval_id,\n      memo: memo,\n    });\n  }\n\n  @call\n  //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\n  nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {\n    return internalNftTransferCall({\n      contract: this,\n      receiverId: receiver_id,\n      tokenId: token_id,\n      approvalId: approval_id,\n      memo: memo,\n      msg: msg,\n    });\n  }\n\n  @call\n  //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n  //returns true if the token was successfully transferred to the receiver_id\n  nft_resolve_transfer({\n    authorized_id,\n    owner_id,\n    receiver_id,\n    token_id,\n    approved_account_ids,\n    memo,\n  }) {\n    return internalResolveTransfer({\n      contract: this,\n      authorizedId: authorized_id,\n      ownerId: owner_id,\n      receiverId: receiver_id,\n      tokenId: token_id,\n      approvedAccountIds: approved_account_ids,\n      memo: memo,\n    });\n  }\n\n  /*\n        APPROVALS\n    */\n  @view\n  //check if the passed in account has access to approve the token ID\n  nft_is_approved({ token_id, approved_account_id, approval_id }) {\n    return internalNftIsApproved({\n      contract: this,\n      tokenId: token_id,\n      approvedAccountId: approved_account_id,\n      approvalId: approval_id,\n    });\n  }\n\n  @call\n  //approve an account ID to transfer a token on your behalf\n  nft_approve({ token_id, account_id, msg }) {\n    return internalNftApprove({\n      contract: this,\n      tokenId: token_id,\n      accountId: account_id,\n      msg: msg,\n    });\n  }\n\n  /*\n        ROYALTY\n    */\n  @view\n  //calculates the payout for a token given the passed in balance. This is a view method\n  nft_payout({ token_id, balance, max_len_payout }) {\n    return internalNftPayout({\n      contract: this,\n      tokenId: token_id,\n      balance: balance,\n      maxLenPayout: max_len_payout,\n    });\n  }\n\n  @call\n  //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance.\n  nft_transfer_payout({\n    receiver_id,\n    token_id,\n    approval_id,\n    memo,\n    balance,\n    max_len_payout,\n  }) {\n    return internalNftTransferPayout({\n      contract: this,\n      receiverId: receiver_id,\n      tokenId: token_id,\n      approvalId: approval_id,\n      memo: memo,\n      balance: balance,\n      maxLenPayout: max_len_payout,\n    });\n  }\n\n  @call\n  //approve an account ID to transfer a token on your behalf\n  nft_revoke({ token_id, account_id }) {\n    return internalNftRevoke({\n      contract: this,\n      tokenId: token_id,\n      accountId: account_id,\n    });\n  }\n\n  @call\n  //approve an account ID to transfer a token on your behalf\n  nft_revoke_all({ token_id }) {\n    return internalNftRevokeAll({ contract: this, tokenId: token_id });\n  }\n\n  /*\n        ENUMERATION\n    */\n  @view\n  //Query for the total supply of NFTs on the contract\n  nft_total_supply() {\n    return internalTotalSupply({ contract: this });\n  }\n\n  @view\n  //Query for nft tokens on the contract regardless of the owner using pagination\n  nft_tokens({ from_index, limit }) {\n    return internalNftTokens({\n      contract: this,\n      fromIndex: from_index,\n      limit: limit,\n    });\n  }\n\n  @view\n  //get the total supply of NFTs for a given owner\n  nft_tokens_for_owner({ account_id, from_index, limit }) {\n    return internalTokensForOwner({\n      contract: this,\n      accountId: account_id,\n      fromIndex: from_index,\n      limit: limit,\n    });\n  }\n\n  @view\n  //Query for all the tokens for an owner\n  nft_supply_for_owner({ account_id }) {\n    return internalSupplyForOwner({ contract: this, accountId: account_id });\n  }\n\n  /*\n        METADATA\n    */\n  @view\n  //Query for all the tokens for an owner\n  nft_metadata() {\n    return internalNftMetadata({ contract: this });\n  }\n}\n"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","storageUsage","storage_usage","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","assert","b","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","Token","ownerId","approvedAccountIds","nextApprovalId","royalty","owner_id","approved_account_ids","next_approval_id","JsonToken","tokenId","metadata","token_id","internalNftMetadata","contract","restoreOwners","collection","royaltyToPayout","royaltyPercentage","amountToPay","BigInt","toString","refundApprovedAccountIdsIter","storageReleased","bytesForApprovedAccountId","reduce","partialSum","a","amountToTransfer","valueOf","promise","refundApprovedAccountIds","refundDeposit","storageUsed","requiredCost","refund","assertAtLeastOneYocto","assertOneYocto","internalAddTokenToOwner","tokenSet","tokensPerOwner","internalRemoveTokenFromOwner","internalTransfer","senderId","receiverId","approvalId","memo","token","tokensById","hasOwnProperty","actualApprovalId","newToken","authorizedId","nftTransferLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","authorized_id","old_owner_id","new_owner_id","token_ids","internalMint","perpetualRoyalties","initialStorageUsage","entries","forEach","account","tokenMetadataById","nftMintLog","requiredStorageInBytes","GAS_FOR_RESOLVE_TRANSFER","GAS_FOR_NFT_ON_TRANSFER","internalNftToken","jsonToken","internalNftTransfer","previousToken","internalNftTransferCall","sender_id","previous_owner_id","receiver_id","internalResolveTransfer","result","internalTotalSupply","internalNftTokens","fromIndex","limit","tokens","start","parseInt","max","internalSupplyForOwner","internalTokensForOwner","GAS_FOR_NFT_ON_APPROVE","internalNftApprove","isNewApproval","approval_id","internalNftIsApproved","approvedAccountId","approval","internalNftRevoke","internalNftRevokeAll","getPrototypeOf","internalNftPayout","balance","maxLenPayout","totalPerpetual","payoutObj","payout","internalNftTransferPayout","Contract","spec","name","symbol","nft_mint","perpetual_royalties","nft_token","nft_transfer","nft_transfer_call","nft_resolve_transfer","nft_is_approved","approved_account_id","nft_approve","account_id","nft_payout","max_len_payout","nft_transfer_payout","nft_revoke","nft_revoke_all","nft_total_supply","nft_tokens","from_index","nft_tokens_for_owner","nft_supply_for_owner","nft_metadata"],"mappings":"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"}